{"timestamp": 1745966836.44304, "stored_source_code": "# Teste de classificadores comuns\nimport numpy as np\nimport pandas as pd\n# declare a list tasks whose products you want to use as inputs\nupstream = ['preparar_classificacao']\nproduct = None\ndf_X = pd.read_parquet(upstream['preparar_classificacao']['data_X'])\ndf_y = pd.read_parquet(upstream['preparar_classificacao']['data_y']).iloc[:, 0]\n## Teste com modelos de classifica\u00e7\u00e3o\nfrom numpy import mean\nfrom numpy import std\nfrom sklearn.metrics import make_scorer\nimport sklearn.metrics as metrics\nfrom sklearn.linear_model import LinearRegression, RidgeClassifier, Lasso\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import KFold, cross_val_score\n\nkfold_data = KFold(n_splits=5, shuffle=True, random_state=31)\ndf_X_input = df_X\n\ndef cutoff_youdens_j(fpr, tpr, thresholds):\n    j_scores = tpr-fpr\n    j_ordered = sorted(zip(j_scores,thresholds))\n    return j_ordered[-1][1]\n    \ndef scorer(y_test, y_pred):\n    fpr, tpr, thresholds = metrics.roc_curve(y_test, y_pred)\n    auc = metrics.roc_auc_score(y_test, y_pred)\n    cutoff = cutoff_youdens_j(fpr, tpr, thresholds)\n    return metrics.f1_score(y_test, [1.0 if x >= cutoff+0.05 else 0.0 for x in y_pred])\n\ndef calculate_score_threshold(model, model_name):\n    scores = cross_val_score(model, df_X_input, df_y, cv=kfold_data, scoring=make_scorer(scorer, response_method=[\"decision_function\", \"predict_proba\"]))\n    print(model_name + '\\nf1: %.3f ,\\nStandard Deviations :%.3f\\n\\n' % (mean(scores), std(scores)))\n    \ndef calculate_score(model, model_name):\n    scores = cross_val_score(model, df_X_input, df_y, cv=kfold_data, scoring='f1')\n    print(model_name + '\\nf1: %.3f ,\\nStandard Deviations :%.3f\\n\\n' % (mean(scores), std(scores)))\n    return mean(scores)\n\ncalculate_score_threshold(RidgeClassifier(), \"linear ridge\")\ncalculate_score_threshold(LogisticRegression(), \"logistic\")\ncalculate_score(DecisionTreeClassifier(random_state=13, max_depth=10), 'decision_tree')\ncalculate_score(RandomForestClassifier(random_state=15, n_estimators=50), 'random forest')\ncalculate_score_threshold(SVC(), \"SVC\")", "params": {}}