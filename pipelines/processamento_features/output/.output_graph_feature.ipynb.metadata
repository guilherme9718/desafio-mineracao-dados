{"timestamp": 1745243417.061581, "stored_source_code": "# Criar grafo bipartido\nimport numpy as np\nimport pandas as pd\nimport ast\nimport networkx as nx\n# declare a list tasks whose products you want to use as inputs\nupstream = None\nproduct = None\nedge_percent = 0.1 # porcentagem de quantidade do peso da aresta para ela ser removida ou n\u00e3o \ndf_input_path = '../../dados/X_trainToronto.csv'\ndf_review_input_path = '../../dados_produzidos/reviewsTrainTorontoSentiment.csv'\ndf_reg = pd.read_csv(df_input_path)\ndf_reg = df_reg[['business_id', 'review_count']]\ndf_reg\n## Fazer grafo bipartido de locais\nSe uma pessoa fez uma avalia\u00e7\u00e3o de dois estabelecimentos, uma aresta ser\u00e1 formada entre eles\ndf_review = pd.read_csv(df_review_input_path)[['business_id', 'user_id']]\ndf_review\ndf_index_to_business = pd.DataFrame(df_reg['business_id'])\ndf_business_to_index = df_reg['business_id'].reset_index().set_index('business_id')\ndf_index_to_review_count = df_reg['review_count'].values\nimport itertools\nfrom tqdm import tqdm\n\ntqdm.pandas()\nG = nx.Graph()\nG.add_nodes_from(df_index_to_business.index)\n    \ndef add_edges(rows):\n    if len(rows) < 2:\n        return\n    business_ids = [df_business_to_index.loc[x].iloc[0] for x in rows['business_id'].unique()]\n    for comb in itertools.combinations(business_ids, 2):\n        if comb in G.edges:\n            G.edges[comb[0], comb[1]]['weight'] += 1\n        else:\n            G.add_edge(comb[0], comb[1], weight=1)\n\ndf_review.groupby('user_id').progress_apply(add_edges)\nG.number_of_edges()\nedges_to_remove = []\nfor u,v,a in tqdm(G.edges(data=True), total=G.number_of_edges()):\n    weight = a['weight']\n    u_review_count = df_index_to_review_count[u]\n    v_review_count = df_index_to_review_count[v]\n    if float(weight) < edge_percent * float(min(u_review_count, v_review_count)):\n        edges_to_remove.append((u, v))\nfor u,v in tqdm(edges_to_remove):\n    G.remove_edge(u, v)\npage_rank = nx.pagerank(G, weight='weight')\ndf_reg['graph_page_rank'] = pd.Series(page_rank)\ncloseness = nx.closeness_centrality(G)\ndf_reg['graph_closeness_centrality'] = pd.Series(closeness)\nbetweeness = nx.betweenness_centrality(G, weight='weight', k=1000)\ndf_reg['graph_betweenness_centrality'] = pd.Series(betweeness)\nnx.write_gml(G, product['graph'])\ndf_reg.to_parquet(product['data'])", "params": {"df_input_path": "../../dados/X_trainToronto.csv", "df_review_input_path": "../../dados_produzidos/reviewsTrainTorontoSentiment.csv", "edge_percent": 0.1}}